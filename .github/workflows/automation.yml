name: Automation Workflow (Reusable)

on:
  workflow_call:
    inputs:
      package:
        description: 'Package to test (api or ui)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to test (api or ui)'
        required: true
        type: string

jobs:
  run-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: write

    services:
      teamcity:
        image: jetbrains/teamcity-server:2025.07.1
        ports: [ "8111:8111" ]
        env:
          TEAMCITY_SERVER_OPTS: "-Djava.security.manager=allow"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Pick ONE of the two blocks below ---

      # A) Start Selenoid (Selenium-compatible grid at :4444)
      - name: Start Selenoid
        uses: Xotabu4/selenoid-github-action@v2

      # B) (Alternative) Selenium Standalone (comment A if you use B)
      # - name: Start Selenium Standalone (Chrome)
      #   run: |
      #     docker run -d --rm --name grid -p 4444:4444 --shm-size=2g selenium/standalone-chrome:4.35.0-20250828
      #     for i in {1..120}; do
      #       if curl -fsS http://localhost:4444/status | jq -er '.value.ready' ; then break; fi
      #       sleep 2
      #     done

      - name: Wait for TeamCity HTTP
        run: |
          for i in {1..180}; do
            if curl -fsS http://localhost:8111/ >/dev/null; then
              echo "TeamCity is responding"; break
            fi
            echo "Waiting for TeamCity..."
            sleep 2
          done

      - name: Extract TeamCity Super User token
        id: super
        run: |
          cid=$(docker ps --filter "ancestor=jetbrains/teamcity-server:2025.07.1" -q | head -n1)
          token=$(docker exec "$cid" sh -lc "grep -oE 'Super user authentication token: [0-9]+' /data/teamcity/logs/teamcity-server.log | tail -1 | awk '{print \$6}'")
          echo "token=$token" >> "$GITHUB_OUTPUT"

      - name: Set up JDK 17 (cache Maven)
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: '17'
          cache: maven

      - name: Build & Test with Maven
        env:
          # Keep your old names, so your tests keep working:
          HOST: localhost
          SUPER_USER_TOKEN: ${{ steps.super.outputs.token }}
          # Also pass explicit variables most frameworks expect:
          TEAMCITY_URL: http://localhost:8111
          SELENOID_URL: http://localhost:4444/wd/hub
          PACKAGE: ${{ inputs.package }}
        run: |
          echo "Package=${PACKAGE}"
          mvn -B -Dtc.url="${TEAMCITY_URL}" -Dtc.super="${SUPER_USER_TOKEN}" -Dselenium.remote="${SELENOID_URL}" clean test

      # --- Swagger coverage (API only) ---
      - name: Ensure coverage dir exists
        if: ${{ inputs.package == 'api' }}
        run: |
          mkdir -p target/swagger-coverage-output
          # create the *same* filename you later upload
          if [ ! -e target/swagger-coverage-output/swagger-coverage-results.json ]; then
            echo "{}" > target/swagger-coverage-output/swagger-coverage-results.json
          fi

      - name: Run Swagger Coverage
        if: ${{ inputs.package == 'api' }}
        continue-on-error: true
        env:
          TEAMCITY_URL: http://localhost:8111
        run: |
          if [ -x .swagger-coverage-commandline/bin/swagger-coverage ]; then
            .swagger-coverage-commandline/bin/swagger-coverage \
              -s "${TEAMCITY_URL}/app/rest/swagger.json" \
              -i target/swagger-coverage-output || true
          else
            echo "swagger-coverage CLI not found; skipping (install it or check it in)"
          fi

      - name: Save Swagger Coverage
        if: ${{ inputs.package == 'api' }}
        uses: actions/upload-artifact@v4
        with:
          name: swagger-coverage
          path: target/swagger-coverage-output/**
          if-no-files-found: warn

      # --- Allure (always try to build) ---
      - name: Load Test Report History
        if: always()
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build Test Report
        if: always()
        uses: simple-elf/allure-report-action@v1.7
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results
          subfolder: ${{ inputs.package }}

      - name: Publish Test Report
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages/allure-history
